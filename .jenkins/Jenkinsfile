
properties([
    buildDiscarder(logRotator(numToKeepStr: '10')),
    pipelineTriggers([
        [$class:"SCMTrigger", scmpoll_spec:"H/10 * * * *"],
    ]),
    disableConcurrentBuilds()
])

def label = "packages-${UUID.randomUUID().toString()}"

def needToDeploy() {
    return BRANCH_NAME == 'master' || BRANCH_NAME == 'develop'
}

def isStaging() {
    return BRANCH_NAME == 'develop'
}

podTemplate(
    label: label,
    containers: [
        containerTemplate(
            name: 'jekyll',
            image: 'jekyll/jekyll:4',
            ttyEnabled: true,
            command: 'cat',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
        ),
        containerTemplate(
            name: 'helm',
            image: 'alpine/helm:2.16.1',
            ttyEnabled: true,
            command: 'cat',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
        ),
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/jenkins', memory: false),
        configMapVolume(mountPath: '/home/jenkins/.ssh', configMapName: 'known-hosts')
    ]
) {

    node(label) {

      container('jnlp') {

        withEnv([
            "PROJECT_NAME=packages",
            "PROJECT_BOT_NAME=Eclipse IoT Packages Bot",
        ]) {

            deleteDir()

            try {

                stage ('Init') {
                    sh "env | sort"
                }

                stage ('Setup') {
                    sh '''
                        pwd
                    '''
                }

                stage ('Clone') {
                    dir ("build") {
                        checkout scm
                    }
                }

            } catch (err) {
                currentBuild.result = 'FAILED'
                throw err
            }
        } /* with-env */
      } /* container */

      container('helm') {
        withEnv([
            "PROJECT_NAME=packages",
            "PROJECT_BOT_NAME=Eclipse IoT Packages Bot",
            "HELM_HOME=${env.WORKSPACE}/helm-home",
        ]) {

          try {

            stage('Helm Init') {
                sh 'helm init --client-only'
            }

            stage('Helm Build') {
                dir("build/charts") {
                    sh 'mkdir -p helm-repository'
                    sh 'helm package -u ditto -d helm-repository'
                }
            }

            stage('Helm Repo') {
                dir("build/charts") {
                    sh 'helm repo index helm-repository --url https://eclipse.org/packages/charts'
                }
            }

          } catch (err) {
              currentBuild.result = 'FAILED'
              throw err
          } /* try */
        } /* with-env */
      } /* container */

      container('jekyll') {

        withEnv([
            "PROJECT_NAME=packages",
            "PROJECT_BOT_NAME=Eclipse IoT Packages Bot",
        ]) {

            try {

                stage ('Jekyll Dependencies') {
                    dir ("build/homepage") {
                        sh 'bundle install'
                    }
                }

                stage ('Jekyll Build') {
                    dir ("build/homepage") {
                        if ( isStaging() ) {
                            sh 'bundle exec ruby /usr/gem/bin/jekyll build --config _config.yml,_config_staging.yml'
                        } else {
                            sh 'bundle exec ruby /usr/gem/bin/jekyll build'
                        }
                    }
                }

            } catch (err) {
                currentBuild.result = 'FAILED'
                throw err
            }
        } /* with-env */
      } /* container */

      container('jnlp') {

        withEnv([
            "PROJECT_NAME=packages",
            "PROJECT_BOT_NAME=Eclipse IoT Packages Bot",
        ]) {

            try {

                if ( needToDeploy() ) {

                    stage ('Checkout website') {
                        dir ("www") {
                            sshagent(['git.eclipse.org-bot-ssh']) {
                                sh '''
                                    if [ ${BRANCH_NAME} == "develop" ]; then
                                      BRANCH_NAME="staging"
                                    fi
                                    git config --global user.email "${PROJECT_NAME}-bot@eclipse.org"
                                    git config --global user.name "${PROJECT_BOT_NAME}"
                                    git clone ssh://genie.${PROJECT_NAME}@git.eclipse.org:29418/www.eclipse.org/${PROJECT_NAME} .
                                    git checkout ${BRANCH_NAME}
                                '''
                            }
                        }
                    }

                    stage ('Copy content') {
                        sh 'rm -rf www/* && cp -Rvf build/homepage/_site/* www/'
                        sh 'mkdir -p www/charts && cp -Rvf build/charts/helm-repository/* www/charts/'
                    }

                    stage ('Commit and push') {
                        dir("www") {
                            sshagent(['git.eclipse.org-bot-ssh']) {
                                sh '''
                                if [ ${BRANCH_NAME} == "develop" ]; then
                                  BRANCH_NAME="staging"
                                fi

                                git add -A
                                if ! git diff --cached --exit-code; then
                                  echo "Changes have been detected, publishing to repo 'www.eclipse.org/${PROJECT_NAME}'"
                                  git commit -m "Website build ${JOB_NAME}-${BUILD_NUMBER}"
                                  git log --graph --abbrev-commit --date=relative -n 5
                                  git push origin HEAD:${BRANCH_NAME}
                                else
                                  echo "No changes have been detected since last build, nothing to publish"
                                fi
                                '''
                            }
                        }
                    }

                }

            } catch (err) {
                currentBuild.result = 'FAILED'
                throw err
            }

        } /* with-env */

      } /* container (jekyll) */

  } /* node */

} /* pod */
